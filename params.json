{"name":"corridor","tagline":"A concurrent genetic algorithm for the multi-objective corridor location problem written in Go","body":"## Introduction\r\ncorridor is library containing Go language functions for the implementation of a concurrent genetic algorithm for the multi-objective corridor location problem. This problem involves finding the least cost connected pathway through a discrete search domain in which each location is characterized by one or more measures of cost. The library requires that the user provide a predefined search domain, objective function(s), and input parameters specifying the nature of the problem (i.e. desired start and destination locations).\r\n\r\n## Installation\r\n\r\nThe project is hosted as a publicly available GitHub repository. Providing that your local client GOPATH and GOROOT variables have been previously defined, the repository can be cloned and built using the following single shell command: \r\n\r\n```\r\n$ go get github.com/ericdfournier/corridor\r\n```\r\n\r\n## Description\r\n\r\nThe work contained in this library is based upon the MOGADOR algorithm that was first introduced by Zhang & Armstrong (2008) in: http://www.envplan.com/abstract.cgi?id=b32167 . It also contains additional modifications to the initialization routine introduced by Fournier (2014) in: placeholderURL . \r\n\r\n## Input Format\r\n\r\nAll inputs must be formatted as comma delimited value (CSV) files. \r\n\r\n### Example Search Domain\r\n\r\nThe search domain should be encoded in a binary format with cells in the feasible search domain set to a value of 1 and cells outside of the feasible search domain set to a value of 0 as below. The user need not generate a \"buffer zone\" of zero encoded cells surrounding the feasible search domain as this is done automatically by the algorithm at runtime. \r\n\r\nsearchDomain.csv \r\n\r\n```\r\n0, 0, 0, 0, 0,\r\n0, 1, 1, 1, 0,\r\n0, 1, 1, 1, 0,\r\n0, 1, 1, 1, 0,\r\n0, 0, 0, 0, 0\r\n```\r\n\r\n### Example Search Objectives\r\n\r\nThe user should note that the objective values for cells that are outside of the search domain will be automatically set to be equal to an arbitrarily high value. Specifically, the objective scores for the locations which are outside of the feasible search domain values are set to be equal to the total number of cells (feasible and otherwise) contained within the entire search domain. For an example illustration of how this work, please see below. \r\n\r\nobjective1.csv\r\n\r\n```\r\n25, 25, 25, 25, 25,\r\n25, 2, 3, 3, 25,\r\n25, 1, 2, 5, 25,\r\n25, 1, 1, 4, 25,\r\n25, 25, 25, 25, 25;\r\n```\r\n\r\nobjective2.csv\r\n\r\n```\r\n25, 25, 25, 25, 25,\r\n25, 4, 1, 3, 25,\r\n25, 5, 3, 6, 25,\r\n25, 2, 1, 3, 25,\r\n25, 25, 25, 25, 25;\r\n```\r\n\r\n### Example Source and Destination Subscripts\r\n\r\nThe source and destination subscript files should be formatted to contain, separately, the row and column subscripts corresponding to the location of the either the source or the destination within the context of the input search domain grid. These subscripts should be stored as two comma separated values on a single line of the input .csv file as below.\r\n\r\nsourceSubs.csv\r\n\r\n```\r\n1,1\r\n```\r\n\r\ndestinationSubs.csv\r\n\r\n```\r\n3,3\r\n```\r\n\r\n## Output Format\r\n\r\nIf the Algorithm fails to converge upon a solution within the given iteration limit, an error message will be printed to the console and a basic log.cv file will be written to the local directory. This log file contains information about the computational runtime and the total number of evolutionary iterations that were executed (which in this case will be equal to the maximum number of evolutions specified by the user). \r\n\r\nIf the Algorithm successfully converges upon a solution within the given iteration limit, a success message will be printed to the console and two files will be written to the local directory. The first is a log.csv file which contains information about the same information quoted previously. The second is an output solution file which contains the row and column subscripts for each step along the solution corridor. Additionally, subsequent rows within this output file will contain the individual, stepwise, objective scores for each of the objectives, for each step along the solution corridor. \r\n\r\n### Example Output \r\n\r\nA possible output solution file for the previously constructed example problem is illustrated below.\r\n\r\n```\r\n[Line #1: Solution #1 Corridor Row Subscripts] 1, 1, 1, 2, 3  \r\n[Line #2: Solution #1 Corridor Column Subscripts] 1, 2, 3, 3, 3\r\n[Line #3: Solution #1 Objective 1 Scores] 2, 3, 3, 5, 4\r\n[Line #4: Solution #1 Objective 2 Scores] 4, 1, 3, 6, 3\r\n[Line #5: Solution #2 Corridor Row Subscripts] ...\r\n[Line #6: Solution #2 Corridor Column Subscripts] ...\r\n[Line #7: Solution #2 Objective 1 Scores] ...\r\n[Line #8: Solution #2 Objective 2 Scores] ...\r\n...\r\n```\r\n\r\nThis pattern is repeated for each output solution requested from the final population by the user. Solutions are automatically sorted by fitness score such that the first solution is the best, the second is the second best, etc.  \r\n\r\n## Author\r\n\r\nThis project was developed by Eric Daniel Fournier [@ericdfournier] as part of his doctoral dissertation research  at the University of California, Santa Barbara's Donald Bren School of Environmental Science & Management. The author would like to acknowledge the generous financial support of the Walton Family Foundation's Sustainable Water Markets Fellowship Program in making this development effort possible. \r\n\r\n## Contact and Support\r\n\r\nIf you have any questions about the usage of this library or would like to discuss the details of its implementation please email me@ericdfournier.com\r\nPlease submit bug reports and other feature requests as issues via the GitHub repo. \r\nThank you for your interest in this project!","google":" ","note":"Don't delete this file! It's used internally to help with page regeneration."}