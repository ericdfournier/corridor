{"name":"corridor","tagline":"A concurrent genetic algorithm for the multi-objective corridor location problem written in Go","body":"## Introduction\r\ncorridor is library containing Go language functions for the implementation of a concurrent genetic algorithm for the multi-objective corridor location problem. This problem involves finding the least cost connected pathway through a discrete search domain in which each location is characterized by one or more measures of cost. The library requires that the user provide a predefined search domain, objective function(s), and input parameters specifying the nature of the problem (i.e. desired start and destination locations).\r\n\r\n## Installation\r\n\r\nThe project is hosted as a publicly available GitHub repository. Providing that your local client GOPATH and GOROOT variables have been previously defined, the repository can be cloned and built using the following single shell command: \r\n\r\n```\r\n$ go get github.com/ericdfournier/corridor\r\n```\r\n\r\n## Description\r\n\r\nThe work contained in this library is based upon the MOGADOR algorithm that was first introduced by Zhang & Armstrong (2008) in: http://www.envplan.com/abstract.cgi?id=b32167 . It also contains additional modifications to the initialization routine introduced by Fournier (2014) in: placeholderURL . \r\n\r\n## Supported Input Formats\r\n\r\nAll inputs must be formatted as comma delimited value (CSV) files. \r\n\r\n### Example Search Domain\r\n\r\nThe search domain should be encoded in a binary format with cells in the feasible search domain set to a value of 1 and cells outside of the feasible search domain set to a value of 0 as below. The user need not generate a \"buffer zone\" of zero encoded cells surrounding the feasible search domain as this is done automatically by the algorithm at runtime. \r\n\r\nsearchDomain.csv \r\n\r\n```\r\n0,0,0,0,0,0,0,0,\r\n0,0,1,1,1,1,0,0,\r\n0,0,1,1,1,1,0,0,\r\n0,0,1,1,1,1,0,0,\r\n0,0,0,0,0,0,0,0\r\n```\r\n\r\n### Example Search Objectives\r\n\r\nThe user should note that the objective values for cells that are outside of the search domain should be set to values that are arbitrarily high. A good rule of thumb for this purpose is to set their values to be equal to the total number of cells (feasible and otherwise) contained within the entire search domain as below.\r\n\r\nobjective1.csv\r\n\r\n```\r\n40,40,40,40,40,40,40,40,\r\n40,40,10,7,5,4,40,40,\r\n40,40,2,9,1,2,40,40,\r\n40,40,7,10,2,4,40,40,\r\n40,40,40,40,40,40,40,40\r\n```\r\n\r\nobjective2.csv\r\n\r\n```\r\n40,40,40,40,40,40,40,40,\r\n40,40,3,6,3,4,40,40,\r\n40,40,8,9,8,2,40,40,\r\n40,40,4,5,9,5,40,40,\r\n40,40,40,40,40,40,40,40\r\n```\r\n\r\n### Example Source and Destination Subscripts\r\n\r\nThe source and destination subscript files should be formatted to contain, separately, the row and column subscripts corresponding to the location of the either the source or the destination within the context of the input search domain grid. These subscripts should be stored as two comma separated values on a single line of the input .csv file as below.\r\n\r\nsourceSubs.csv\r\n\r\n```\r\n1,3\r\n```\r\n\r\ndestinationSubs.csv\r\n\r\n```\r\n3,5\r\n```\r\n\r\n## Author\r\nThis project was developed by Eric Daniel Fournier [@ericdfournier] as part of his doctoral dissertation research  at the University of California, Santa Barbara's Donald Bren School of Environmental Science & Management. The author would like to acknowledge the generous financial support of the Walton Family Foundation's Sustainable Water Markets Fellowship Program in making this development effort possible. \r\n\r\n## Contact and Support\r\nIf you have any questions about the usage of this library or would like to discuss the details of its implementation please email me@ericdfournier.com\r\nPlease submit bug reports and other feature requests as issues via the GitHub repo. \r\nThank you for your interest in this project!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}